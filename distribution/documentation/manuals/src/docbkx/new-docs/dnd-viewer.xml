<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>DND Viewer development</title>

  <para>The DND viewer basically displays a set of <classname>View</classname>
  objects, where each view is render its assigned
  <classname>Content</classname> object. A content is something like a
  message, a service object, a domain object or a field within a domain
  object. If a view is to show more than one thing (eg the contents of a list,
  or the properties of an object) then the view must provide a set of subviews
  and arrange those views is some orderly fashion. The viewer provides
  <classname>AbstractCompositeView</classname> for this purpose. A further
  subclass, <classname>CompositeViewBuilder</classname>, provides an even
  better mechanism by allowing a ViewBuilder to be assigned to create and add
  the subviews, while an <classname>AbstractBuilderDecorator</classname> can
  be assigned to layout the subviews. Many builders and layouts are provided
  that can be combined to create specific views.</para>

  <para>In addtion to this creation process the views themselves can be
  decorated to provide specific behaviour and looks.</para>

  <section>
    <title>Specification</title>

    <para>Each available view is created via a
    <classname>ViewSpecification</classname> instance. An instance of each
    specification is registered with the view factory, either directly (via
    the <classname>ViewFactory</classname> instance) or indirectly via the
    configuration file. To register a view specification at runtime add
    something like the following to the
    <filename>nakedobjects.properties</filename>, or other properties,
    file.</para>

    <programlisting>nakedobjects.viewer.dnd.specification.view=org.nakedobjects.viewer.dnd.view.calendar.CalendarSpecification, \
    org.nakedobjects.viewer.dnd.view.form.WindowExpandableFormSpecification
</programlisting>

    <para>Each specification determines if it can display a particular object,
    by returning <literal>true</literal>/<literal>false</literal> from the
    <methodname>canDisplay(Content)</methodname> method.</para>

    <para>The name of the specification, provided via the
    <methodname>getName</methodname> method, is used to create a list of
    available views that the user can select from.</para>

    <para>An open view (<methodname>isOpen</methodname> returning
    <literal>true</literal>) indicates that the view shows content of the
    object, as opposed to just the object itself.</para>

    <para>A subview (<methodname>isSubview</methodname> returning
    <literal>true</literal>) indicates that the view can be used as a child
    part of another view. Otherwise the view is a root view, standing by
    itself.</para>

    <para>A view that can be replaced by another view within the screen area
    is indicated by <methodname>isReplaceable</methodname> returning
    <literal>true</literal>.</para>

    <para>TODO what is <methodname>isAligned</methodname>?</para>
  </section>

  <section>
    <title>View</title>

    <para>Displayed objects are rendered using an instance of
    <classname>View</classname>. View classes are typically created by
    subclassing <classname>AbstractView.</classname></para>

    <para>Views are designed so that the can be decorated to add looks and
    behaviour. Such decorators are typically created by subclassing
    AbstractViewDecorator.</para>

    <para></para>

    <section>
      <title>Sizing</title>

      <para>Views can request a specific area to render themselves within. The
      parent view, starting from the top-level workspace, asks each component
      view by calling the view's <methodname>getRequiredSize</methodname>
      method. The parent passes in the maximum size so that component can make
      the most of the available space.</para>
    </section>

    <section>
      <title>Layout</title>

      <para>Each view provides a layout mechanism (via the
      <methodname>layout(Size)</methodname> method) that should size and
      position each of its subviews. This is not applicable to node views,
      which by definition have no children. The size passed in the amount of
      space available to the view. Before the layout method is called the
      getRequiredSize method is called to determine the optimum size to
      provide for the view. The laying out of a view should only occur when
      the contents have changed so a flag should be maintained to track this.
      The <methodname>invalidateLayout</methodname> method should set this
      flag so the the viewer can indicate when a view needs to be re-laid out.
      It should also pass up the request to ensure that any work done by the
      superclass will also be completed. The example below shows a typical
      layout scenario.</para>

      <programlisting>    public void invalidateLayout() {
        super.invalidateLayout();
        invalidLayout = true;
    }

    public void layout(final Size maximumSize) {
        if (invalidLayout) {
            Size formSize = form.getRequiredSize(maximumSize);
            form.setSize(formSize);
            form.layout(maximumSize);
            form.setLocation(new Location(0,0));
            
            Size collectionSize = collection.getRequiredSize(maximumSize);
            collection.setSize(collectionSize);
            collection.layout(maximumSize);
            collection.setLocation(new Location(0, formSize.getHeight()));

            invalidLayout = false;
        }
    }</programlisting>
    </section>

    <section>
      <title>Drawing</title>

      <para>The parent asks each component to draw itself by calling the
      view's <methodname>draw</methodname> method. A Canvas object is passed
      in that is then used to do the actual drawing.</para>

      <para>A view can also provide a <methodname>print</methodname> method
      for drawing to a printing surface. In the AbstractView class this simply
      delegates to the draw method to allow the one method to render both to
      screen and paper.</para>
    </section>

    <section>
      <title>Window border</title>

      <para>A view can be given a border by chaining a
      <classname>WindowBorder</classname> decorator to a view as follows,
      indicating if the window is scrollable with the second parameter.</para>

      <programlisting>new WindowBorder(new SimpleView(content, axis), false);</programlisting>

      <para>The style of the border can be changed by providing a
      <classname>BorderDrawing</classname> class that is used for all
      instances.</para>
    </section>
  </section>

  <section>
    <title>Composite views</title>

    <para>Although you can create your own subclass of
    <classname>View</classname> that contain other views, it can be a lot
    simpler to extend the <classname>AbstractCompositeView</classname> class
    or to use the <classname>CompositeViewBuilder</classname> class in
    conjunction with some <classname>ViewBuilder</classname> objects to build
    and layout a view. The bulk of the work in a composite view, however, is
    in passing the events etc on to the right subview, and this is something
    the <classname>AbstractCompositeView</classname> view does for you.</para>

    <para>For a view that you want to construct and layout extend the
    <classname>AbstractCompositeView</classname> class and add methods to
    build the view, determine its required size and layout its components. The
    following example shows a view for summarising an object. The
    <methodname>buildView</methodname> method calls addView for each of the
    component view, which in this example are the default views for each field
    object. The <methodname>getMaximumSize</methodname> method add the heights
    of all the component views togther and finds the maximum width. The
    <methodname>doLayout</methodname> method simply sets the size of each
    component to its required size and sets the vertical position so they are
    stacked vertically.</para>

    <programlisting>public class SummaryView extends AbstractCompositeView {

    public SummaryView(Content content, ViewSpecification specification, ViewAxis viewAxis) {
        super(content, specification, viewAxis);
    }

    protected void buildView() {
        NakedObjectSpecification spec = getContent().getSpecification();
        AuthenticationSession session = NakedObjectsContext.getAuthenticationSession();
        NakedObject target = getContent().getNaked();
        NakedObjectAssociation[] fields = spec.getAssociations(NakedObjectAssociationFilters.dynamicallyVisible(session, target));
        for (int i = 0; i &lt; fields.length; i++) {
            Content fieldContent = Toolkit.getContentFactory().createFieldContent(fields[i], target, fields[i].get(target));
            if (fieldContent instanceof TextParseableContent) {
                View view = Toolkit.getViewFactory().createFieldView((TextParseableField) fieldContent, null);
                addView(view);
            }
            if (fieldContent instanceof ObjectContent) {
                View view = Toolkit.getViewFactory().createView(new ViewRequirement(fieldContent, ViewRequirement.CLOSED));
                addView(view);
            }
        }
    }

    public Size getMaximumSize() {
        Size size = new Size(0, 0);
        for (View view : getSubviews()) {
            Size viewSize = view.getMaximumSize();
            size.extendHeight(viewSize.getHeight());
            size.ensureWidth(viewSize.getWidth());
        }
        return size;
    }

    protected void doLayout(Size maximumSize) {
        int y = 0;
        for (View view : getSubviews()) {
            Size viewSize = view.getMaximumSize();
            view.setSize(viewSize);
            view.layout(maximumSize);
            view.setLocation(new Location(0, y));
            y += viewSize.getHeight();
        }
    }

    public String toString() {
        return "Form" + getId();
    }
}</programlisting>

    <para>The following example shows this</para>

    <programlisting>
public class MyListSpecification extends AbstractCompositeViewSpecification {

    public MyListSpecification() {
        SubviewSpec subviewSpec = new SubviewSpec() {
            public View createSubview(final Content content, final ViewAxis axis) {
                return new InternalFormSpecification().createView(content, axis);
            }

            public View decorateSubview(final View subview) {
                return new EmptyBorder(3, new BackgroundBorder(new LineBorder(1, 8, new IconBorder(subview))));
            }
        };
        builder = new StackLayout(new CollectionElementBuilder(subviewSpec));
    }

    public String getName() {
        return "My List";
    }

    public boolean canDisplay(final Content content) {
        return content.isCollection();
    }
}
</programlisting>

    <section>
      <title>Master/detail panel</title>

      <para>A panel with a set of closed objects on one side and an opened
      object on the other side can be created using the
      <classname>MasterDetailPanel</classname> class. When the master view is
      created a <classname>SelectableViewAxis</classname> is created and
      passed to each item so that it can indicate that is selected and tell
      the main view to show that object on the detail side. For this to work
      the item view must detect the <classname>SelectableViewAxis</classname>
      and use it to set and show that item's selected state. This is currently
      provided TreeNodeBorder and by the
      <classname>SubviewIconSpecification</classname>, which adds a
      <classname>SelectedBorder</classname> decorator to the icon.</para>

      <para>The detail side is initially created with BlankView object. This
      is then replaced by a view created for the object that is selected via
      the <classname>SelectableViewAxis</classname>.</para>
    </section>
  </section>

  <section>
    <title>Axis</title>

    <para>If separate views need to be related, for example for their sizes to
    be made consistent or find out a maximum value, then an ViewAxis object
    should be created and passed to each subview.</para>

    <para></para>

    <para></para>
  </section>

  <section>
    <title>Borders</title>

    <para>Borders decorate views by adding behaviour and content to their
    edges. Border are used at all levels to distinguish and control windows,
    objects and fields. Borders are decorators, so are added like this, which
    gives 3 pixels of empty space, a default white background, a rounded
    rectangle and an object icon :</para>

    <programlisting>new EmptyBorder(3, new BackgroundBorder(new LineBorder(1, 8, new IconBorder(subview))));</programlisting>

    <para>Windows can be created by decorating a view with a
    <classname>WindowBorder</classname> or
    <classname>DialogBorder</classname>.</para>

    <para>Control buttons can be added to views (as done for dialogs) using a
    <classname>ButtonBorder</classname>.</para>

    <para>Simple decorative borders include:
    <classname>BackgroundBorder</classname>,
    <classname>LineBorder</classname>, <classname>EmptyBorder</classname> and
    <classname>LabelBorder</classname>.</para>

    <section>
      <title>Resizable views</title>

      <para>Views are typically fixed size by design so that a view always,
      where possible, shows it entire content. A view can be made resizable by
      adding a <classname>ViewResizeBorder</classname> decorator, which will
      provide a drag handle to resize the view with.</para>

      <programlisting>view = new ViewResizeBorder(view);</programlisting>
    </section>

    <section>
      <title></title>

      <para></para>
    </section>
  </section>

  <section>
    <title>Menus</title>

    <para>Menu items are added by creating <classname>UserAction</classname>
    objects.</para>
  </section>

  <section>
    <title>Interactions</title>

    <para>All user events - keyboard and mouse events - are routed through
    <classname>InteractionHandler</classname>.</para>
  </section>

  <section>
    <title>Gotchas</title>

    <para>If a view, and particularly a border, has it contents changed so it
    is wrapping a different object, then it must reset the view property via a
    call to the setView method as shown below. This example is from a border
    that replaces an icon with a form so initially we</para>

    <para>ExpanderBorder --&gt; ObjectBorder --&gt; Icon</para>

    <para>and after the first click we get</para>

    <para>ExpanderBorder --&gt; <emphasis>IconBorder</emphasis> --&gt;
    <emphasis>CompositeView</emphasis></para>

    <para>where the border and composite are newly created. Because the form
    was created without reference to the ExpanderBorder it has the
    <emphasis>view</emphasis> property set to reference the IconBorder. Call
    setView as below corrects this so that view refers to the ExpanderBorder
    instead.</para>

    <programlisting>            View parent = wrappedView.getParent();
            
            getViewManager().removeFromNotificationList(wrappedView);
            if (isOpen) {
                wrappedView = new InternalFormSpecification().createView(getContent(), null);
            } else {
                ViewRequirement requirement = new ViewRequirement(getContent(), ViewRequirement.CLOSED);
                wrappedView = Toolkit.getViewFactory().createView(requirement );
            }
            <emphasis role="bold">setView(this);</emphasis>
            setParent(parent);
</programlisting>
  </section>

  <section>
    <title>Loading images</title>

    <para></para>

    <programlisting>            Image busyImage = ImageFactory.getInstance().loadIcon("busy", 16, null);
</programlisting>
  </section>
</chapter>
