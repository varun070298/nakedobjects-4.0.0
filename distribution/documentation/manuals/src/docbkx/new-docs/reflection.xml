<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//Naked Objects Group Ltd//DTD Docs 0.1//EN" 
"http://nakedobjects.org/xml/documentation.dtd">
<section>
  <title>Reflection</title>

  <para>To make the domain objects useful within the framework the objects'
  public interfaces must be exposed. Reflection capabilities are used to
  determine what fields or properties an object has, what behaviour it can
  offer, and to find other information such as the object's title, a suggested
  order of it fields, when the actions can or can't be used. The details about
  this interface are recorded in an instance of
  <class>NakedObjectSpecification</class>. As each class of domain object is
  loaded into the system introspection is performed and an instance of
  <class>NakedObjectSpecification</class> is generated. That specification
  object is subsequently available from any object adapter (using the
  <method>NakedObject.getSpecification</method> method) for that type of
  domain object; or it can be retrieved directly, by name or class, from the
  <class>NakedObjectSpecificationLoader</class> instance (obtained from the
  <class>NakedObjects</class> repository).</para>

  <para>Through an object's <class>NakedObjectSpecification</class> instance
  the rest of the NOF can find out the fields that an object has, the methods
  it offers, the title to use to identify the object, and other details about
  the object. These are used normally used by the implementations of
  NakedObject etc when another component ask the adapter for details about
  another object. For example For example the statement
  <code>adapter.getField(no.getFields()[0])</code> would retrieve the first
  field in the domain object held by the naked object referenced by
  <code>adapter</code>.</para>

  <subheading>How it Works</subheading>

  <para>When a domain object is used within the NOF the
  <class>NakedObjectSpecificationLoader</class> instance is asked for the
  <class>NakedObjectSpecification</class> for the domain object's class (by
  name or <class>java.lang.Class</class> object). For performance reasons
  these objects are normally cached and if the class has previously been
  introspected then the cached version would be returned. The first time that
  class is requested however the loader is responsible for performing the
  introspection and creating a complete
  <class>NakedObjectSpecification</class>.</para>

  <para>For each field that the reflector recognises the loader creates either
  a <class>OneToOneAssociation</class> object for a value field or a reference
  field, or a <class>OneToManyAssociation</class> object for a collection or
  array. Using the field objects the NOF can access or change the values and
  references in the domain object. The fields can also be used by the NOF to
  find out the field name, if the fields are visible and whether it can be
  modified.</para>

  <para>For each action method that the reflector recognises the loader must
  create an <class>Action</class> object. Using the action object the NOF can
  invoke the method on the domain object. The action object also can be used
  by the NOF to find out the action's name, whether it is visible and whether
  it can be executed.</para>

  <para>In addition to the fields and actions the specification must can also:
  return the various forms of class name (singular; plural; short; and full);
  retrieve a title from, or generate a title for, the domain object; flag the
  type of object (abstract, lookup, object, value, and whether persistable);
  refer to its superclass, any inteferfaces it implements and any subclasses;
  and allow objects to marked/cleared as being dirty.</para>

  <subheading>Installation</subheading>

  <para>To set up the NOF to use a reflection mechanism the
  <class>NakedObjects</class> repository must be given a
  <class>NakedObjectSpecificationLoader</class> instance before the repository
  is initialised. This can be done using the repository's static
  <method>setSpecificationLoader</method> method. For example, the following
  sets the NOF up to use the basic reflector.</para>

  <program-listing>NakedObjectSpecificationLoader loader = new JavaSpecificationLoader();
NakedObjects.setSpecificationLoader(loader);
</program-listing>

  <para></para>
</section>
